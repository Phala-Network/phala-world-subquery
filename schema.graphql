type Identity @entity {
  id: ID!
  displayName: String
  originShells: [MintedOriginOfShellNft!]! @derivedFrom(field: "identity")
  shells: [MintedShellNft!] @derivedFrom(field: "identity")
}

type MintedOriginOfShellNft @entity {
  id: ID! #id is a required field
  createdAt: Date!
  owner: String! @index
  collectionId: Int! @index
  nftId: Int! @index
  rarity: String! @index
  career: String! @index
  race: String! @index
  generation: Int! @index
  feds: [FedOriginOfShell!]! @derivedFrom(field: "shell")
  identity: Identity
  shell: MintedShellNft
}

type MintedShellNft @entity {
  id: ID! #id is a required field
  createdAt: Date!
  owner: String! @index
  shellCollectionId: Int! @index
  shellNftId: Int! @index
  originShellCollectionId: Int
  originShellNftId: Int
  rarity: String! @index
  career: String! @index
  race: String! @index
  generation: Int! @index
  identity: Identity
  origin: MintedOriginOfShellNft
}

enum PreorderStatus {
  PENDING
  CHOSEN
  REFUNDED
}

type OriginOfShellPreorder @entity {
  id: ID!
  createdAt: Date!
  owner: String! @index
  preorderId: Int! @index
  nftId: Int @index
  status: PreorderStatus!
  race: String! @index
  career: String! @index
}

type StartedIncubationTime @entity {
  id: ID!
  collectionId: Int! @index
  nftId: Int! @index
  owner: String!
  startTime: BigInt!
  hatchTime: BigInt!
}

type FedOriginOfShell @entity {
  id: ID!
  createdAt: Date!
  collectionId: Int! @index
  nftId: Int! @index
  sender: String! @index
  receiver: String! @index
  era: Int @index
  shell: MintedOriginOfShellNft!
}

type ListedNft @entity {
  id: ID!
  createdAt: Date!
  owner: String! @index
  collectionId: Int! @index
  nftId: Int! @index
  amount: BigInt
}

type UnlistedNft @entity {
  id: ID!
  createdAt: Date!
  owner: String! @index
  collectionId: Int! @index
  nftId: Int! @index
}

type SoldNft @entity {
  id: ID!
  createdAt: Date!
  sender: String! @index
  buyer: String! @index
  collectionId: Int! @index
  nftId: Int! @index
  price: BigInt! @index
}
